- name: cloudnative-workshopv2-apb playbook to provision the application
  hosts: localhost
  gather_facts: false
  connection: local
  vars:
    openshift_user: 
    openshift_password: 
    openshift_token:
    openshift_master_url: 
    openshift_user_password:
    project_suffix: "-XX"
    github_account: RedHat-Middleware-Workshops
    github_ref: master
    gogs_dev_user: developer
    gogs_pwd: openshift
    gogs_generate_user_format: user%02d  
    gogs_clone_addr_m1: "https://github.com/RedHat-Middleware-Workshops/cloud-native-workshop-v2m1-labs.git"
    gogs_clone_addr_m2: "https://github.com/RedHat-Middleware-Workshops/cloud-native-workshop-v2m2-labs.git"
    gogs_clone_addr_m3: "https://github.com/RedHat-Middleware-Workshops/cloud-native-workshop-v2m3-labs.git"
    gogs_clone_addr_m4: "https://github.com/RedHat-Middleware-Workshops/cloud-native-workshop-v2m4-labs.git"
    gogs_repo_name_m1: "cloud-native-workshop-v2m1-labs"
    gogs_repo_name_m2: "cloud-native-workshop-v2m2-labs"
    gogs_repo_name_m3: "cloud-native-workshop-v2m3-labs"
    gogs_repo_name_m4: "cloud-native-workshop-v2m4-labs"
    gogs_user_count: 0
    gogs_user_format: user%d
    infrasvcs_adm_user: adminuser
    infrasvcs_adm_pwd: adminpwd
    infrasvcs_gogs_user_count: 25
    master_url: "kubernetes.default"
    modules: "{{ modules }}"

  roles:
  - role: ansible.kubernetes-modules
    install_python_requirements: no
  - role: ansibleplaybookbundle.asb-modules

  tasks:    
  - name: login as super user with token
    shell: "oc login {{ master_url }} --token={{ openshift_token }} --insecure-skip-tls-verify=true"
    when:
      - openshift_token is defined
      - openshift_token is not none
      - openshift_token|trim() != ""
    tags: always

  - name: login as super user with pwd
    shell: "oc login {{ master_url }} -u {{ openshift_user }} -p {{ openshift_password }} --insecure-skip-tls-verify=true"
    when: >
      openshift_token is not defined or
      openshift_token is none or
      openshift_token|trim() == ""
    tags: always  
          
  - name: extract app route suffix
    block:
      - openshift_v1_route:
          name: dummy
          namespace: "{{ namespace }}"
          state: present
          spec_to_kind: Service
          spec_to_name: dummy
          spec_port_target_port: 8080
        register: dummy_route
      - set_fact:
          apps_hostname_suffix: "{{ dummy_route.route.spec.host|regex_replace('^dummy-' + namespace + '\\.(.*)$', '\\1') }}"
      - openshift_v1_route:
          name: dummy
          namespace: "{{ namespace }}"
          state: absent
    tags: always

  - name: delete project quota
    shell: "oc delete limitrange --all -n {{ namespace }}"
    ignore_errors: true
    tags: always
  
  - name: delete coolstore-monolith-binary-build template
    shell: "oc delete template coolstore-monolith-binary-build -n openshift"
    register: workshopper_project_result
    ignore_errors: true
    tags: always
   
  - name: create coolstore-monolith-binary-build template
    shell: "oc create -f https://raw.githubusercontent.com/RedHat-Middleware-Workshops/cloud-native-workshop-v2m1-labs/master/monolith/src/main/openshift/template-binary.json -n openshift"
    when:
      - openshift_token is defined
      - openshift_token is not none
      - openshift_token|trim() != ""
    tags: always

  - name: delete coolstore-monolith-pipeline-build template
    shell: "oc delete template coolstore-monolith-pipeline-build -n openshift"
    register: workshopper_project_result
    ignore_errors: true
    tags: always

  - name: create coolstore-monolith-pipeline-build template
    shell: "oc create -f https://raw.githubusercontent.com/RedHat-Middleware-Workshops/cloud-native-workshop-v2m1-labs/master/monolith/src/main/openshift/template-prod.json -n openshift"
    when:
      - openshift_token is defined
      - openshift_token is not none
      - openshift_token|trim() != ""
    tags: always
  
  - name: disable namespace ownership for router
    shell: "oc set env dc/router --overwrite ROUTER_DISABLE_NAMESPACE_OWNERSHIP_CHECK=true -n default"
    when:
      - openshift_token is defined
      - openshift_token is not none
      - openshift_token|trim() != ""
    tags: always

  - import_role:
      name: openshift_sonatype_nexus
    vars:
      project_name: "{{ namespace }}"
      nexus_image_version: 3.12.1
      nexus_max_memory: 6Gi
    tags: nexus
 
 # deploy rhamt-rhsso
  - import_role:
      name: rhamt
    vars:
      OCP_PROJECT: "{{ namespace }}"
      REQUESTED_CPU: "{{ requested_cpu }}"
      REQUESTED_MEMORY: "{{ requested_memory }}"
    tags: rhamt

 # deploy gogs
  - import_role:
      name: openshift_gogs
    vars:
      project_name: "{{ namespace }}"
      gogs_route: "gogs-{{ namespace }}.{{ apps_hostname_suffix }}"
      gogs_image_version: 0.11.34
      gogs_admin_user: "{{ infrasvcs_adm_user }}"
      gogs_admin_password: "{{ infrasvcs_adm_pwd }}"
      gogs_user: "{{ gogs_dev_user }}"
      gogs_password: "{{ gogs_pwd }}"
    tags: gogs

  - name: Create gogs users
    uri:
      url: http://gogs-{{ namespace }}.{{ apps_hostname_suffix }}/api/v1/admin/users
      method: POST
      body: "{'login_name': '{{ item }}', 'username': '{{ item }}', 'email': '{{ item }}@gogs.com', 'password': '{{ gogs_pwd }}'}"
      body_format: json
      user: "{{ infrasvcs_adm_user }}"
      password: "{{ infrasvcs_adm_pwd }}"
      status_code: 200,201
      force_basic_auth: true
    ignore_errors: true
    with_sequence: start=0 end={{ infrasvcs_gogs_user_count }} format="{{ gogs_user_format }}"
    when: infrasvcs_gogs_user_count > 0

  - name: migrate moduel 1 repos for all users
    uri:
      url: http://gogs-{{ namespace }}.{{ apps_hostname_suffix }}/api/v1/repos/migrate
      method: POST
      body: "{'clone_addr': '{{ gogs_clone_addr_m1 }}', 'uid': {{ item|int + 3 }}, 'repo_name': '{{ gogs_repo_name_m1 }}' }"
      body_format: json
      username: "user{{ item }}"
      url_username: "user{{ item }}"
      password: "{{ gogs_pwd }}"
      status_code: 200,201
      force_basic_auth: true
    ignore_errors: true
    with_sequence: start=0 end={{ infrasvcs_gogs_user_count }}
    when: infrasvcs_gogs_user_count > 0 and modules is search("m1")

  - name: migrate moduel 2 repos for all users
    uri:
      url: http://gogs-{{ namespace }}.{{ apps_hostname_suffix }}/api/v1/repos/migrate
      method: POST
      body: "{'clone_addr': '{{ gogs_clone_addr_m2 }}', 'uid': {{ item|int + 3 }}, 'repo_name': '{{ gogs_repo_name_m2 }}' }"
      body_format: json
      username: "user{{ item }}"
      url_username: "user{{ item }}"
      password: "{{ gogs_pwd }}"
      status_code: 200,201
      force_basic_auth: true
    ignore_errors: true
    with_sequence: start=0 end={{ infrasvcs_gogs_user_count }}
    when: infrasvcs_gogs_user_count > 0 and modules is search("m2")

  - name: migrate moduel 3 repos for all users
    uri:
      url: http://gogs-{{ namespace }}.{{ apps_hostname_suffix }}/api/v1/repos/migrate
      method: POST
      body: "{'clone_addr': '{{ gogs_clone_addr_m3 }}', 'uid': {{ item|int + 3 }}, 'repo_name': '{{ gogs_repo_name_m3 }}' }"
      body_format: json
      username: "user{{ item }}"
      url_username: "user{{ item }}"
      password: "{{ gogs_pwd }}"
      status_code: 200,201
      force_basic_auth: true
    ignore_errors: true
    with_sequence: start=0 end={{ infrasvcs_gogs_user_count }}
    when: infrasvcs_gogs_user_count > 0 and modules is search("m3")

  - name: migrate moduel 4 repos for all users
    uri:
      url: http://gogs-{{ namespace }}.{{ apps_hostname_suffix }}/api/v1/repos/migrate
      method: POST
      body: "{'clone_addr': '{{ gogs_clone_addr_m4 }}', 'uid': {{ item|int + 3 }}, 'repo_name': '{{ gogs_repo_name_m4 }}' }"
      body_format: json
      username: "user{{ item }}"
      url_username: "user{{ item }}"
      password: "{{ gogs_pwd }}"
      status_code: 200,201
      force_basic_auth: true
    ignore_errors: true
    with_sequence: start=0 end={{ infrasvcs_gogs_user_count }}
    when: infrasvcs_gogs_user_count > 0 and modules is search("m4")

 # deploy guides-che
  - import_role:
      name: openshift_workshopper
      allow_duplicates: true
    vars:
      workshopper_name: guides-m1
      project_name: "{{ namespace }}"
      workshopper_content_url_prefix: "https://raw.githubusercontent.com/{{ github_account }}/cloud-native-workshop-v2m1-guides/{{ github_ref }}"
      workshopper_workshop_urls: "https://raw.githubusercontent.com/{{ github_account }}/cloud-native-workshop-v2m1-guides/{{ github_ref }}/_cloud-native-workshop-module1.yml"
      workshopper_env_vars:
        PROJECT_SUFFIX: "{{ project_suffix }}"
        COOLSTORE_PROJECT: coolstore{{ project_suffix }}
        OPENSHIFT_CONSOLE_URL: "{{ openshift_master_url }}"
        ECLIPSE_CHE_URL: http://che-{{ namespace }}.{{ apps_hostname_suffix }}
        GIT_URL: http://gogs-{{ namespace }}.{{ apps_hostname_suffix }}
        NEXUS_URL: http://nexus-{{ namespace }}.{{ apps_hostname_suffix }}
        ROUTE_SUFFIX: "{{ apps_hostname_suffix }}"
    when: modules is search("m1")
    tags: guides

  
  - import_role:
      name: openshift_workshopper
      allow_duplicates: true
    vars:
      workshopper_name: guides-m2
      project_name: "{{ namespace }}"
      workshopper_content_url_prefix: "https://raw.githubusercontent.com/{{ github_account }}/cloud-native-workshop-v2m2-guides/{{ github_ref }}"
      workshopper_workshop_urls: "https://raw.githubusercontent.com/{{ github_account }}/cloud-native-workshop-v2m2-guides/{{ github_ref }}/_cloud-native-workshop-module2.yml"
      workshopper_env_vars:
        PROJECT_SUFFIX: "{{ project_suffix }}"
        COOLSTORE_PROJECT: coolstore{{ project_suffix }}
        OPENSHIFT_CONSOLE_URL: "{{ openshift_master_url }}"
        ECLIPSE_CHE_URL: http://che-{{ namespace }}.{{ apps_hostname_suffix }}
        GIT_URL: http://gogs-{{ namespace }}.{{ apps_hostname_suffix }}
        NEXUS_URL: http://nexus-{{ namespace }}.{{ apps_hostname_suffix }}
        ROUTE_SUFFIX: "{{ apps_hostname_suffix }}"
    when: modules is search("m2")
    tags: guides
  
  - import_role:
      name: openshift_workshopper
      allow_duplicates: true
    vars:
      workshopper_name: guides-m3
      project_name: "{{ namespace }}"
      workshopper_content_url_prefix: "https://raw.githubusercontent.com/{{ github_account }}/cloud-native-workshop-v2m3-guides/{{ github_ref }}"
      workshopper_workshop_urls: "https://raw.githubusercontent.com/{{ github_account }}/cloud-native-workshop-v2m3-guides/{{ github_ref }}/_cloud-native-workshop-module3.yml"
      workshopper_env_vars:
        PROJECT_SUFFIX: "{{ project_suffix }}"
        COOLSTORE_PROJECT: coolstore{{ project_suffix }}
        OPENSHIFT_CONSOLE_URL: "{{ openshift_master_url }}"
        ECLIPSE_CHE_URL: http://che-{{ namespace }}.{{ apps_hostname_suffix }}
        GIT_URL: http://gogs-{{ namespace }}.{{ apps_hostname_suffix }}
        NEXUS_URL: http://nexus-{{ namespace }}.{{ apps_hostname_suffix }}
        ROUTE_SUFFIX: "{{ apps_hostname_suffix }}"
    when: modules is search("m3")
    tags: guides

  - import_role:
      name: openshift_workshopper
      allow_duplicates: true
    vars:
      workshopper_name: guides-m4
      project_name: "{{ namespace }}"
      workshopper_content_url_prefix: "https://raw.githubusercontent.com/{{ github_account }}/cloud-native-workshop-v2m1-guides/{{ github_ref }}"
      workshopper_workshop_urls: "https://raw.githubusercontent.com/{{ github_account }}/cloud-native-workshop-v2m4-guides/{{ github_ref }}/_cloud-native-workshop-module4.yml"
      workshopper_env_vars:
        PROJECT_SUFFIX: "{{ project_suffix }}"
        COOLSTORE_PROJECT: coolstore{{ project_suffix }}
        OPENSHIFT_CONSOLE_URL: "{{ openshift_master_url }}"
        ECLIPSE_CHE_URL: http://che-{{ namespace }}.{{ apps_hostname_suffix }}
        GIT_URL: http://gogs-{{ namespace }}.{{ apps_hostname_suffix }}
        NEXUS_URL: http://nexus-{{ namespace }}.{{ apps_hostname_suffix }}
        ROUTE_SUFFIX: "{{ apps_hostname_suffix }}"
    when: modules is search("m4")
    tags: guides

  # install openjdk imagestream
  - name: get openjdk image stream
    shell: "oc get is java -n openshift"
    register: java_imagestream_result
    ignore_errors: true
    tags: jdk

  - name: install java image stream
    shell: "oc apply -n openshift -f https://raw.githubusercontent.com/jboss-openshift/application-templates/master/openjdk/openjdk18-image-stream.json"
    when: java_imagestream_result is failed
    tags: jdk

  # update jenkins templates
  - import_role:
      name: openshift_jenkins
    vars:
      update_jenkins_templates: true
      jenkins_template_disable_admin_monitors: true
      deploy_jenkins: false
      jenkins_max_cpu: 2
      jenkins_max_mem: 2Gi

  # Post RH-SSO configuration
  - name: Get access token to update RH-SSO theme
    uri: 
      url: https://secure-rhamt-web-console-{{ namespace }}.{{ apps_hostname_suffix }}/auth/realms/master/protocol/openid-connect/token
      method: POST
      body: "username=admin&password=password&grant_type=password&client_id=admin-cli"
      status_code: 200, 201
      force_basic_auth: true
      validate_certs: no
      return_content: yes
      headers:
        Content-Type: "application/x-www-form-urlencoded"
    register: result_token
         
  - name: Update a master realm with RH-SSO theme
    uri: 
      url: https://secure-rhamt-web-console-{{ namespace }}.{{ apps_hostname_suffix }}/auth/admin/realms/master/
      method: PUT
      body_format: json
      body: '{ "displayName": "rh-sso", "displayNameHtml": "<strong>Red Hat</strong><sup>®</sup> Single Sign On", "loginTheme": "rh-sso", "adminTheme": "rh-sso", "accountTheme": "rh-sso", "emailTheme": "rh-sso", "accessTokenLifespan": 6000 }'
      status_code: 204
      force_basic_auth: true
      validate_certs: no
      headers:
        Content-Type: "application/json"
        Accept: "application/json"
        Authorization: "Bearer {{ result_token.json.access_token }}"
    when: result_token.json.access_token != ""

  - name: Create RH-SSO users as many as gogs users
    uri: 
      url: https://secure-rhamt-web-console-{{ namespace }}.{{ apps_hostname_suffix }}/auth/admin/realms/rhamt/users
      method: POST
      body_format: json
      body: '{ "username": "user{{ item }}", "enabled": true, "disableableCredentialTypes": [ "password" ] }' 
      status_code: 200, 201, 409
      force_basic_auth: true
      validate_certs: no
      headers:
        Content-Type: "application/json"
        Accept: "application/json"
        Authorization: "Bearer {{ result_token.json.access_token }}"
    ignore_errors: true
    with_sequence: start=1 end={{ infrasvcs_gogs_user_count }}
    when: result_token.json.access_token != "" and infrasvcs_gogs_user_count > 0

  - name: Retrieve RH-SSO user's ID list
    uri: 
      url: https://secure-rhamt-web-console-{{ namespace }}.{{ apps_hostname_suffix }}/auth/admin/realms/rhamt/users
      method: GET
      status_code: 200, 201, 409
      force_basic_auth: true
      validate_certs: no
      return_content: yes
      headers:
        Accept: "application/json"
        Authorization: "Bearer {{ result_token.json.access_token }}"
    ignore_errors: true
    when: result_token.json.access_token != ""
    register: result_useridlist

  - name: Get access token to reset passwords
    uri: 
      url: https://secure-rhamt-web-console-{{ namespace }}.{{ apps_hostname_suffix }}/auth/realms/master/protocol/openid-connect/token
      method: POST
      body: "username=admin&password=password&grant_type=password&client_id=admin-cli"
      status_code: 200, 201
      force_basic_auth: true
      validate_certs: no
      return_content: yes
      headers:
        Content-Type: "application/x-www-form-urlencoded"
    register: result_token

  - name: Reset passwords for each RH-SSO user like userxx
    uri: 
      url: https://secure-rhamt-web-console-{{ namespace }}.{{ apps_hostname_suffix }}/auth/admin/realms/rhamt/users/{{ item.id }}/reset-password
      method: PUT
      body_format: json
      body: '{ "type": "password", "value": "{{ gogs_pwd }}", "temporary": true}' 
      status_code: 204
      force_basic_auth: true
      validate_certs: no
      headers:
        Content-Type: "application/json"
        Accept: "application/json"
        Authorization: "Bearer {{ result_token.json.access_token }}"
    ignore_errors: true
    with_items: "{{ result_useridlist.json }}"
    when: item.username != "rhamt"
    
  # This will be replaced with Operator on OCP 4
  - name: Deploy CodeReady Workspace
    shell: |
      rm -rf codeready-workspace-quarkus codeready-workspaces-1.1.0.GA-operator-installer.tar.gz
      git clone https://github.com/danieloh30/codeready-workspace-quarkus.git && cd codeready-workspace-quarkus/
      tar xvf codeready-workspaces-1.1.0.GA-operator-installer.tar.gz && cd codeready-workspaces-operator-installer
      ./deploy.sh --deploy --project="labs-infra"
  
  - name: wait for che to be running
    uri:
      url: http://codeready-workspaces-{{ project_name }}.{{ route_suffix }}/api/system/state
      status_code: 200
    register: result
    until: result.status == 200
    retries: 60
    delay: 30

  - name: Add a Cloud Native Workshop Stack
    uri:
      url: http://codeready-workspaces-{{ project_name }}.{{ route_suffix }}/api/stack
      method: POST
      body: '{
              "name": "Cloud Native Workshop v2",
              "description": "Cloud Native Java Stack, Quarkus, odo on CentOS",
              "scope": "general",
              "workspaceConfig": {
                "environments": {
                  "default": {
                    "recipe": {
                      "type": "dockerimage",
                      "content": "quay.io/openshiftlabs/cloudnative-workspaces-quarkus:1.1"
                    },
                    "machines": {
                      "dev-machine": {
                        "env": {
                          "MAVEN_OPTS" : "-Xmx512m",
                          "MAVEN_MIRROR_URL": "http://nexus:8081/repository/maven-all-public"
                        },
                        "servers": {
                          "8080/tcp": {
                            "attributes": {},
                            "protocol": "http",
                            "port": "8080"
                          },
                          "8000/tcp": {
                            "attributes": {},
                            "protocol": "http",
                            "port": "8000"
                          },
                          "9000/tcp": {
                            "attributes": {},
                            "protocol": "http",
                            "port": "9000"
                          },
                          "9001/tcp": {
                            "attributes": {},
                            "protocol": "http",
                            "port": "9001"
                          }
                        },
                        "volumes": {},
                        "installers": [
                          "org.eclipse.che.exec",
                          "org.eclipse.che.terminal",
                          "org.eclipse.che.ws-agent",
                          "org.eclipse.che.ls.java"

                        ],
                        "attributes": {
                          "memoryLimitBytes": "4294967296"
                        }
                      }
                    }
                  }
                },
                "commands": [
                  {
                    "commandLine": "mvn install -f ${current.project.path} -s ${current.project.path}/.settings.xml",
                    "name": "build",
                    "type": "mvn",
                    "attributes": {
                      "goal": "Build",
                      "previewUrl": ""
                    }
                  },
                  {
                    "commandLine": "mvn clean install -f ${current.project.path} -s ${current.project.path}/.settings.xml",
                    "name": "clean build",
                    "type": "mvn",
                    "attributes": {
                      "goal": "Build",
                      "previewUrl": ""
                    }
                  },
                  {
                    "commandLine": "mvn verify -f ${current.project.path} -s ${current.project.path}/.settings.xml",
                    "name": "test",
                    "type": "mvn",
                    "attributes": {
                      "goal": "Test",
                      "previewUrl": ""
                    }
                  },
                  {
                    "commandLine": "mvn clean compile quarkus:dev -f ${current.project.path}",
                    "name": "Build and Run Locally",
                    "type": "custom",
                    "attributes": {
                      "goal": "Run",
                      "previewUrl": "${server.8080/tcp}"
                    }
                  },
                  {
                    "commandLine": "MAVEN_OPTS=\"-Xmx1024M -Xss128M -XX:MetaspaceSize=512M -XX:MaxMetaspaceSize=1024M -XX:+CMSClassUnloadingEnabled\" mvn -f ${current.project.path} clean package -Pnative ; oc login https://$KUBERNETES_SERVICE_HOST:$KUBERNETES_SERVICE_PORT -u kubeadmin -p vPnVq-3G65B-3y9VZ-3WYk5 --insecure-skip-tls-verify=true",
                    "name": "Build Native Quarkus App",
                    "type": "custom",
                    "attributes": {
                      "goal": "Package",
                      "previewUrl": ""
                    }
                  },
                  {
                    "commandLine": "MAVEN_OPTS=\"-Xmx1024M -Xss128M -XX:MetaspaceSize=512M -XX:MaxMetaspaceSize=1024M -XX:+CMSClassUnloadingEnabled\" mvn -f ${current.project.path} clean package ; odo login https://$KUBERNETES_SERVICE_HOST:$KUBERNETES_SERVICE_PORT -u kubeadmin -p vPnVq-3G65B-3y9VZ-3WYk5  --insecure-skip-tls-verify=true",
                    "name": "Package for OpenShift",
                    "type": "custom",
                    "attributes": {
                      "goal": "Package",
                      "previewUrl": ""
                    }
                  },
                  {
                    "commandLine": "mvn spring-boot:run -f ${current.project.path}",
                    "name": "run spring-boot",
                    "type": "mvn",
                    "attributes": {
                        "goal": "Run",
                        "previewUrl": "${server.9000/tcp}"
                    }
                  }
                ],
                "projects": [],
                "defaultEnv": "default",
                "name": "default",
                "links": []
              },
              "components": [
                {
                  "version": "---",
                  "name": "CentOS"
                },
                {
                  "version": "1.8.0_45",
                  "name": "JDK"
                },
                {
                  "version": "3.6.0",
                  "name": "Maven"
                },
                {
                  "version": "2.4",
                  "name": "Ansible"
                },
                {
                  "version": "4.0.0",
                  "name": "OpenShift CLI"
                }
              ],
              "creator": "ide",
              "tags": [
                "Java",
                "JDK",
                "Maven",
                "Ansible",
                "CentOS",
                "Git"
              ],
              "id": "cloud-native-workshop-v2"
            }'
      body_format: json
      status_code: 200,201
